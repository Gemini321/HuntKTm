# CUDA toolkit installation path
NVCC_DIR=$(dir $(shell which nvcc))
CUDA_DIR=$(realpath $(NVCC_DIR)/..)
CLANG_DIR=$(dir $(shell which clang))
LLVM_DIR=$(realpath $(CLANG_DIR)/..)
BUILD_DIR=$(abspath ../../../build)
LIB_DIR=$(abspath ../../../lib)
OBJ_DIR=$(abspath ../../../lib)
SCHEDULER_PASS_DIR=${BUILD_DIR}/src/passes/scheduler
WRAPPER_PASS_DIR=$(BUILD_DIR)/src/passes/wrapper
WRAPPER_LIB_DIR=${BUILD_DIR}/src/runtime/wrapper

SCHEDULER_PASS=$(BUILD_DIR)/src/passes/scheduler/libSchedulerPass.so
MEMSCHEDULER_PASS=$(BUILD_DIR)/src/passes/scheduler/libMemSchedulerPass.so

WRAPPER_PASS=$(BUILD_DIR)/src/passes/wrapper/libWrapperPass.so
WRAPPERMEMORY_PASS=$(BUILD_DIR)/src/passes/wrapper/libWrapperMemoryPass.so
WRAPPERNOWRAP_PASS=$(BUILD_DIR)/src/passes/wrapper/libWrapperNowrapPass.so
WRAPPERMEMORYNOWRAP_PASS=$(BUILD_DIR)/src/passes/wrapper/libWrapperMemoryNowrapPass.so

SCHEDULER_BIN=$(OBJ_DIR)/RuntimeScheduler
LIB_WRAPPER_NAME=Wrapper

# CUDA toolkit libraries
CUDA_LIB_DIR := $(CUDA_DIR)/lib
ifeq ($(shell uname -m), x86_64)
     ifeq ($(shell if test -d $(CUDA_DIR)/lib64; then echo T; else echo F; fi), T)
     	CUDA_LIB_DIR := $(CUDA_DIR)/lib64
     endif
endif
